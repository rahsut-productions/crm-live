"""
Django settings for crm project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'x7&uk9p$*8&0_9$+&o9%w0p9*!x*$m8b4fy37pu=hdx23e1b0@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['rahsut-crm.herokuapp.com', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts.apps.AccountsConfig', # added because it's an app we created and Django needs to know that this app exists
    'django_filters', # added because it's an app we installed through pip and Django needs to know that this app exists
    'storages', # added for the database thingy for AWS
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # this is included because Heroku does not know how to serve static files; this helps Heroku understand how to
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # sqlite3 was changed to postgres as that is what we will use
        'NAME': 'demo_1', # database name in pgadmin (under Live DBS)
        'USER': 'rahsut', # default user is postgres if not changed
        'PASSWORD':'ceaser1975', # no password for now,
        'HOST':'database-1.cdvzpjyvghws.us-east-2.rds.amazonaws.com', # where the server is being held at (made with AWS)
        'PORT':'5432' # what port the server is held on; for the database, it is 5432 as configured in pdadmin.

    }
}
'''

DATABASES = {
    'default': {
        'ENGINE' : 'django.db.backends.sqlite3',
        'NAME' : BASE_DIR/'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = BASE_DIR/"staticfiles" # all static files will go here when in heroku s3 bucket thing

STATIC_URL = '/static/'

MEDIA_URL = '/images/' # this specifies any kind of images or videos

STATICFILES_DIRS = [ # list for finding CSS files
    # will look for root directory, then look for static folder to find file
    BASE_DIR/"static" # tells Django where to look for file and what file to look for

] 

# image (profile pic as described in models.py) will be submitted through this media root 
MEDIA_ROOT = BASE_DIR/"static/images"



'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''

'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''

'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''

'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''

'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''

'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''

'''DO NOT SHOW ANYTHING BELOW TO PUBLIC. DO NOT SHARE CODE. DO NOT SCROLL ANY FURTHER'''







# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html <--- DOCUMENTATION 

# SMTP Configuration

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
# this is the port that Gmail use (I used gmail in EMAIL_HOST_USER & EMAIL_HOST_PASSWORD)
EMAIL_PORT = 587
# our email is using Transport Layer Security
EMAIL_USE_TLS = True
# 
EMAIL_HOST_USER = 'tusharpassi2015@gmail.com'
EMAIL_HOST_PASSWORD = 'ceaser1975'

# S3 BUCKETS CONFIG (the way done below should be done with environmental variables but this specific
# way does not use that. Make sure to use environmental variables though.)
AWS_ACCESS_KEY_ID = 'AKIAQ4ZM2LWLZDUPZ43D'
AWS_SECRET_ACCESS_KEY = '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'
AWS_STORAGE_BUCKET_NAME = 'rahsut-crm-bucket' # the bucket name is in S3 in AWS
# needed for US-EAST server
AWS_S3_REGION_NAME = 'us-east-2' #change to your region
#AWS_S3_SIGNATURE_VERSION = 's3v4'

AWS_S3_FILE_OVERWRITE = False # we set this to false. the variable means that if their is a file uploaded with same name, it will NOT be replaced. if it is true, then it will be replaced.
AWS_DEFAULT_ACL = None # we set this to false.
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' 
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' # instead of looking for css, js, img, practically all static files on local computer, it will look in s3 bucket in AWS


# MAKE SURE TO PIP INSTALL THIS (pip install django-storages) allows us to work with backend and lets us setup static files. chceck docs for more info
# after that MAKE SURE TO PIP INSTALL THIS AS WELL (pip install boto3) allows us to work with s3 buckets and more specific things, check docs for more info. it seems
# as if boto3 gets downloaded after you download previous pip install of django-storages
